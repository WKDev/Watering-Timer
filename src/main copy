//Watering IoT Unit
//Coded May 28, 2021
// Supports :
//OTA Upload
//HTTP Server(once it triggered, it turns on for 30 mins )
// 192.168.0.5 ACUNIT // it should be updated

//Arduino OTA
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <ArduinoJson.h>

// HTTPServer
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>

#ifndef STASSID
#define STASSID "IoT_System"
#define STAPSK "nodemcu01"
#endif

//DEFINE PINS --- SHOULD REMAP PIN!!!!!!!!!!!!!!!!
#define DHTTYPE DHT22 // DHT 22 (AM2302)
// #define LIGHT_CODE 1  // LIGHT_CODE는 임의 지정
#define DHTPIN 4 // DHT22 D2
// #define IR_PIN D3

#define RELAY 15
#define BUTTON 14

#define UNIT_TYPE "Watering Timer"

const char *ssid = STASSID;
const char *password = STAPSK;

ESP8266WebServer server(80);

int triggerState = LOW;
unsigned long startTime = 0;

// Serving Hello world
void getHelloWord()
{
  DynamicJsonDocument doc(512);
  doc["name"] = "Hello world";

  Serial.print(F("Stream..."));
  String buf;
  serializeJson(doc, buf);
  server.send(200, "application/json", buf);
  Serial.print(F("done."));
}

// Serving Hello world
void getSettings()
{
  // Allocate a temporary JsonDocument
  // Don't forget to change the capacity to match your requirements.
  // Use arduinojson.org/v6/assistant to compute the capacity.
  //  StaticJsonDocument<512> doc;
  // You can use DynamicJsonDocument as well
  DynamicJsonDocument doc(512);

  doc["ip"] = WiFi.localIP().toString();
  doc["gw"] = WiFi.gatewayIP().toString();
  doc["nm"] = WiFi.subnetMask().toString();

  if (server.arg("signalStrength") == "true")
  {
    doc["signalStrengh"] = WiFi.RSSI();
  }

  if (server.arg("chipInfo") == "true")
  {
    doc["chipId"] = ESP.getChipId();
    doc["flashChipId"] = ESP.getFlashChipId();
    doc["flashChipSize"] = ESP.getFlashChipSize();
    doc["flashChipRealSize"] = ESP.getFlashChipRealSize();
  }
  if (server.arg("freeHeap") == "true")
  {
    doc["freeHeap"] = ESP.getFreeHeap();
  }

  Serial.print(F("Stream..."));
  String buf;
  serializeJson(doc, buf);
  server.send(200, F("application/json"), buf);
  Serial.print(F("done."));
}
void handleRoot()
{
  String message = "<h1>Welcome to Cranberry-IoT END UNIT.</h1>";
  message += "<h2>This is " + String(UNIT_TYPE) + " Unit</h2>";
  message += "<p>URI: ";
  message += server.uri();
  message += "</p><p>Method: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\n</p><p>Arguments: ";
  message += server.args();
  message += "</p>";
  message += "<p>local IP : " + WiFi.localIP().toString() + "</p>";
  message += "<a href=/api/acdata>ACData</a>";
  message += "<a href=/api/light/refer>Light</a>";

  for (uint8_t i = 0; i < server.args(); i++)
  {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(200, "text/html", message);
}
void handleOn()
{

  String message = "<h1>Welcome to Cranberry-IoT END UNIT.</h1>";
  message += "<h2>This is " + String(UNIT_TYPE) + " Unit</h2>";
  message += "<p>URI: ";
  message += server.uri();
  message += "</p><p>Method: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\n</p><p>Arguments: ";
  message += server.args();
  message += "</p>";
  message += "<p>local IP : " + WiFi.localIP().toString() + "</p>";
  message += "<a href=/api/acdata>ACData</a>";
  message += "<a href=/api/light/refer>Light</a>";

  for (uint8_t i = 0; i < server.args(); i++)
  {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(200, "text/html", message);
}

// Define routing
void restServerRouting()
{
  server.on("/", HTTP_GET, handleRoot);
  server.on(F("/helloWorld"), HTTP_GET, getHelloWord);
  server.on(F("/settings"), HTTP_GET, getSettings);
}

// Manage not found URL
void handleNotFound()
{
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i = 0; i < server.args(); i++)
  {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
}

void waterTimer()
{
  if (triggerState)
  {
    if (millis() < (startTime + 1000 * 60 * 1))
    { // millis + sec + min
      digitalWrite(RELAY, HIGH);
    }
    else
    {
      digitalWrite(RELAY, LOW);
    }
  }
}

void setup()
{
  //WiFi CONNECTION
  Serial.begin(115200);
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED)
  {
    Serial.println("Connection Failed! Rebooting...");
    delay(1000);

    ESP.restart();
  }

  // Port defaults to 8266
  // ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  // ArduinoOTA.setHostname("myesp8266");

  // No authentication by default
  ArduinoOTA.setPassword("admin");

  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

  ArduinoOTA.onStart([]()
                     {
                       String type;
                       if (ArduinoOTA.getCommand() == U_FLASH)
                       {
                         type = "sketch";
                       }
                       else
                       { // U_FS
                         type = "filesystem";
                       }

                       // NOTE: if updating FS this would be the place to unmount FS using FS.end()
                       Serial.println("Start updating " + type);
                     });
  ArduinoOTA.onEnd([]()
                   { Serial.println("\nEnd"); });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total)
                        { Serial.printf("Progress: %u%%\r", (progress / (total / 100))); });
  ArduinoOTA.onError([](ota_error_t error)
                     {
                       Serial.printf("Error[%u]: ", error);
                       if (error == OTA_AUTH_ERROR)
                       {
                         Serial.println("Auth Failed");
                       }
                       else if (error == OTA_BEGIN_ERROR)
                       {
                         Serial.println("Begin Failed");
                       }
                       else if (error == OTA_CONNECT_ERROR)
                       {
                         Serial.println("Connect Failed");
                       }
                       else if (error == OTA_RECEIVE_ERROR)
                       {
                         Serial.println("Receive Failed");
                       }
                       else if (error == OTA_END_ERROR)
                       {
                         Serial.println("End Failed");
                       }
                     });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println("Ready to get OTAUpdate.");

  Serial.println(WiFi.localIP());

  // Activate mDNS this is used to be able to connect to the server
  // with local DNS hostmane esp8266.local
  if (MDNS.begin("esp8266"))
  {
    Serial.println("MDNS responder started");
  }

  // Set server routing
  restServerRouting();
  // Set not found response
  server.onNotFound(handleNotFound);
  // Start server
  server.begin();
  Serial.println("HTTP server started");

  pinMode(RELAY, OUTPUT);
  pinMode(BUTTON, INPUT);
}

void loop()
{
  ArduinoOTA.handle();
  server.handleClient();
  if (digitalRead(BUTTON) == HIGH)
  {
    digitalWrite(RELAY, LOW);
    Serial.println(1);
  }
  else
  {
    Serial.println(0);
    digitalWrite(RELAY, HIGH);
  }
}